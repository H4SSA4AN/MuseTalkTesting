#!/usr/bin/env python3
"""
Helper script to create a .env file with custom port numbers
"""

import os
import sys

def create_env_file():
    """Create a .env file with user-specified port numbers"""
    
    print("MuseTalk Environment Configuration")
    print("=" * 40)
    print("This script will help you create a .env file with custom port numbers.")
    print("Press Enter to use default values, or enter custom values.")
    print()
    
    # Get user input for port numbers
    try:
        musetalk_port = input("MuseTalk server port (default: 8081): ").strip()
        if not musetalk_port:
            musetalk_port = "8081"
        else:
            musetalk_port = str(int(musetalk_port))  # Validate it's a number
        
        web_port = input("Web interface port (default: 8080): ").strip()
        if not web_port:
            web_port = "8080"
        else:
            web_port = str(int(web_port))  # Validate it's a number
        
        # Ask about remote access
        print("\nFor remote access (accessing from other machines), you may want to bind to all interfaces.")
        remote_access = input("Enable remote access? (y/N): ").strip().lower()
        
        if remote_access in ['y', 'yes']:
            musetalk_host = "0.0.0.0"
            web_host = "0.0.0.0"
            print("✓ Remote access enabled - servers will bind to all interfaces")
        else:
            musetalk_host = "localhost"
            web_host = "localhost"
            print("✓ Local access only - servers will bind to localhost")
        
    except ValueError:
        print("Error: Port numbers must be valid integers")
        return False
    except KeyboardInterrupt:
        print("\nConfiguration cancelled")
        return False
    
    # Create the .env file content
    env_content = f"""# MuseTalk Server Configuration
# Generated by create_env.py

# MuseTalk inference server settings
MUSETALK_HOST={musetalk_host}
MUSETALK_PORT={musetalk_port}

# Web interface server settings
WEB_HOST={web_host}
WEB_PORT={web_port}
"""
    
    # Write the .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print(f"\n✓ .env file created successfully!")
        print(f"  MuseTalk server: {musetalk_host}:{musetalk_port}")
        print(f"  Web interface: {web_host}:{web_port}")
        print(f"\nYou can now start the servers using:")
        print(f"  python start_servers.py")
        print(f"  or")
        print(f"  ./start_servers.sh (Linux/Mac)")
        print(f"  start_servers.bat (Windows)")
        
        return True
        
    except Exception as e:
        print(f"Error creating .env file: {e}")
        return False

def main():
    """Main function"""
    if os.path.exists('.env'):
        overwrite = input("A .env file already exists. Overwrite it? (y/N): ").strip().lower()
        if overwrite not in ['y', 'yes']:
            print("Configuration cancelled")
            return
    
    success = create_env_file()
    if success:
        print("\nConfiguration complete!")
    else:
        print("\nConfiguration failed!")
        sys.exit(1)

if __name__ == "__main__":
    main()
